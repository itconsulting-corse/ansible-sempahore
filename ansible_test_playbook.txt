---
- name: Test de gestion des mises à jour
  hosts: test_servers
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Afficher les informations système
      debug:
        msg: "Système: {{ ansible_distribution }} {{ ansible_distribution_version }}"
    
    - name: Vérifier les paquets disponibles pour mise à jour (Ubuntu/Debian)
      apt:
        update_cache: yes
        upgrade: no
      register: apt_check
      when: ansible_os_family == "Debian"
      check_mode: yes

    - name: Obtenir la liste des packages à mettre à jour
      shell: apt list --upgradable 2>/dev/null | grep -v "WARNING" | tail -n +2
      register: upgradable_packages
      changed_when: false
      failed_when: false

    - name: Compter le nombre de packages à mettre à jour
      shell: apt list --upgradable 2>/dev/null | grep -v "WARNING" | tail -n +2 | wc -l
      register: packages_count
      changed_when: false

    - name: Afficher le résumé des mises à jour disponibles
      debug:
        msg: |
          ==========================================
          Serveur: {{ inventory_hostname }}
          Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}
          ==========================================
          Nombre de packages à mettre à jour: {{ packages_count.stdout }}

    - name: Afficher la liste des packages à mettre à jour
      debug:
        msg: "{{ item }}"
      loop: "{{ upgradable_packages.stdout_lines }}"
      when: upgradable_packages.stdout_lines | length > 0

    - name: Afficher les détails des mises à jour
      debug:
        msg: "{{ item }}"
      loop: "{{ upgrade_details.stdout_lines }}"
      when: upgrade_details.stdout_lines | length > 0

    - name: Préparer le rapport JSON pour l'API
      set_fact:
        update_report:
          hostname: "{{ inventory_hostname }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          distribution: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
          packages_count: "{{ packages_count.stdout | int }}"
          packages: "{{ upgradable_packages.stdout_lines | default([]) }}"
          upgrade_details: "{{ upgrade_details.stdout_lines | default([]) }}"
      
    - name: Poster le rapport sur l'URL spécifiée
      uri:
        url: "{{ report_url }}"
        method: POST
        body_format: json
        body:
          server: "{{ update_report.hostname }}"
          timestamp: "{{ update_report.timestamp }}"
          distribution: "{{ update_report.distribution }}"
          packages_count: "{{ update_report.packages_count }}"
          packages: "{{ update_report.packages }}"
          upgrade_details: "{{ update_report.upgrade_details }}"
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ api_token | default('') }}"
        status_code: [200, 201, 202]
        timeout: 30
      register: post_result
      
    - name: Afficher le résultat de l'envoi du rapport
      debug:
        msg: "Rapport envoyé avec succès à {{ report_url }} - Status: {{ post_result.status }}"
      when: report_url is defined and post_result.status in [200, 201, 202]
      
    - name: Gérer les erreurs d'envoi du rapport
      debug:
        msg: "Erreur lors de l'envoi du rapport: {{ post_result.msg | default('Erreur inconnue') }}"
      when: report_url is defined and post_result.failed is defined and post_result.failed
