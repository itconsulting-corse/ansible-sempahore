---
- name: Mises à jour de sécurité
  hosts: "{{ target_group | default('test_servers') }}"
  become: yes
  serial: "{{ batch_size | default(2) }}"  # Traiter 2 serveurs à la fois
  
  vars:
    reboot_required: false
    
  pre_tasks:
    - name: Vérifier l'espace disque disponible
      command: df -h /
      register: disk_space
      
    - name: Arrêter si l'espace disque est insuffisant
      fail:
        msg: "Espace disque insuffisant pour les mises à jour"
      when: disk_space.stdout | regex_search('([0-9]+)% /', '\\1') | first | int > 85
  
  tasks:
    - name: Créer un snapshot avant mise à jour (optionnel)
      debug:
        msg: "Création d'un snapshot recommandée avant les mises à jour"
    
    - name: Mettre à jour le cache des paquets (Ubuntu/Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
    
    - name: Installer les mises à jour de sécurité (Ubuntu/Debian)
      apt:
        upgrade: safe
        autoremove: yes
        autoclean: yes
      register: apt_result
      when: ansible_os_family == "Debian"
    
    - name: Installer les mises à jour de sécurité (RHEL/CentOS)
      yum:
        name: "*"
        state: latest
        security: yes
        update_cache: yes
      register: yum_result
      when: ansible_os_family == "RedHat"
    
    - name: Vérifier si un redémarrage est nécessaire (Ubuntu/Debian)
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian"
    
    - name: Vérifier si un redémarrage est nécessaire (RHEL/CentOS)
      command: needs-restarting -r
      register: needs_restarting
      failed_when: needs_restarting.rc not in [0, 1]
      when: ansible_os_family == "RedHat"
    
    - name: Planifier le redémarrage si nécessaire
      set_fact:
        reboot_required: true
      when: >
        (ansible_os_family == "Debian" and reboot_required_file.stat.exists) or
        (ansible_os_family == "RedHat" and needs_restarting.rc == 1)
    
    - name: Redémarrer le serveur si nécessaire
      reboot:
        reboot_timeout: 300
        test_command: uptime
      when: reboot_required and auto_reboot | default(false)
    
    - name: Notifier si redémarrage manuel nécessaire
      debug:
        msg: "ATTENTION: Redémarrage requis pour {{ inventory_hostname }}"
      when: reboot_required and not (auto_reboot | default(false))
  
  post_tasks:
    - name: Vérifier les services critiques après mise à jour
      service:
        name: "{{ item }}"
        state: started
      loop: "{{ critical_services | default(['ssh', 'sshd']) }}"
      ignore_errors: yes
